%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"

#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);

static long brklbl[20], brkcnt; /* break labels */
static long continuelbl[20], continuecnt; /* break labels */


static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

static char* func_name;

extern FILE *outfp;
char *dupstr(const char *s);

int lbl;

int ptr_loadchr;//flag for loadchr

char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}
static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}

static int only_integer(Node *p){
  printf("lef %d rig %d \n",LEFT_CHILD(p)->info, RIGHT_CHILD(p)->info);
  return LEFT_CHILD(p)->info == 1 && RIGHT_CHILD(p)->info == 1 ? 1 : MAX_COST; 
}

static int only_string(Node *p){
  return LEFT_CHILD(p)->info == 2 && RIGHT_CHILD(p)->info == 2 ? 1 : MAX_COST; 
}

// static int only_string_left(Node *p){
//   printf("only lef str value%d\n",LEFT_CHILD(p)->attrib);

//   return LEFT_CHILD(p)->info == 2 ? 1 : MAX_COST; 
// }
// static int not_string_left(Node *p){
//   printf("NOT lef str value%d\n",LEFT_CHILD(p)->info);
//   return LEFT_CHILD(p)->info != 2 ? 1 : MAX_COST; 
// }

// static int only_string1(Node *p){
//   return p->info == 2 ? 1 : MAX_COST; 
// }

// static int not_string1(Node *p){
//   return p->info != 2 ? 1 : MAX_COST; 
// }

static int only_integer_left(Node *p){
  return LEFT_CHILD(p)->info == 1 ? 1 : MAX_COST; 
}

static int only_integer1(Node *p){
  return p->info == 1 ? 1 : MAX_COST; 
}

static int only_real1(Node *p){
  return p->info == 3 ? 1 : MAX_COST; 
}

static int has_real(Node *p){
  return LEFT_CHILD(p)->info == 3 || RIGHT_CHILD(p)->info == 3 ? 1 : MAX_COST; 
}

static int same_type(Node *p){
  return LEFT_CHILD(p)->info == RIGHT_CHILD(p)->info ? 1 : MAX_COST; 
}

static int left_real_right_int(Node *p){
  return LEFT_CHILD(p)->info == 3 && RIGHT_CHILD(p)->info == 1 ? 1 : MAX_COST; 
}
static int left_int_right_real(Node *p){
  return LEFT_CHILD(p)->info == 1 && RIGHT_CHILD(p)->info == 3 ? 1 : MAX_COST; 
}

static void convert_child_real(Node*p){
  if(LEFT_CHILD(p)->info == 1) fprintf(outfp,pfDPOP pfI2D pfDPUSH); 
  if(RIGHT_CHILD(p)->info == 1) fprintf(outfp,pfI2D);
}

int dim(int type);

%}
%term END=';' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>' EQ='=' OR='|' AND='&' INDEX='[' PARAMS=',' ALLOC='#' FACT='!'
%term FINIT='(' BLOCO='{'
%include "y.tab.h"
%%

finit: FINIT(blocop, NIL)
finit: FINIT(blocop, params)


blocop: NIL     
blocop: bloco

%! VERIFY (provavelmente separar o END eventualmente)
bloco: BLOCO(END(list,brk),decls)
bloco: BLOCO(list,decls)



list: base
list: END(list,base)




%! FIXME fazer o codigo
brk: BREAK        1   {fprintf(outfp, pfJMP, mklbl(brklbl[brkcnt + 1 - p->value.i]));}
brk: CONTINUE      1   {fprintf(outfp, pfJMP, mklbl(continuelbl[continuecnt + 1 - p->value.i]));}

%!stmt:	VOID 1	{	}




%! fix this
tipo: INTEGER 1 {}
tipo: STRING 1 {}
tipo: NUMBER 1 {}

%!init: ID 1 {}

params: PARAMS(params,param) 1  {}
params: param               1   {}




args:   ARGS(arg,args)       { p->place =  ((LEFT_CHILD(p)->place) + (RIGHT_CHILD(p)->place)); }
args:   NIL       { p->place = 0; }
%! nao serve de nada de momento
arg:    expr        { p->place = dim(p->info); printf("arg info value %d\n",(int)p->place);}


param: PARAM(tipo,ID)   

decls: NIL
decls: DECLS(decls,param)  


base: NIL
base: bloco
base: expr
base: ALLOC(alloc,lv) 1 {fprintf(outfp, pfSTORE);}
alloc:	expr		1 { fprintf(outfp, pfIMM pfMUL pfALLOC pfSP, pfWORD); }

%! while for
base:   WHILE(do,expr)   1 { brkcnt--; continuecnt--; fprintf(outfp, pfJZ, mklbl(LEFT_CHILD(p)->place)); fprintf(outfp, pfJMP pfLABEL, mklbl(LEFT_CHILD(LEFT_CHILD(p))->place), mklbl(LEFT_CHILD(p)->place)); }
do: DO(begin,stmt) 1 { p->place = LEFT_CHILD(p)->place + 1;  fprintf(outfp, pfLABEL, mklbl(p->place + 1)); /*Label for continue to jump*/}
begin:  START        1 { p->place = ++lbl; fprintf(outfp, pfLABEL, mklbl(lbl)); brklbl[++brkcnt] = ++lbl; continuelbl[++continuecnt] = ++lbl;   }

base: END(expr,for)
for: FOR(in,END(for_stmt,expr)) 1 {brkcnt--; continuecnt--; fprintf(outfp, pfJMP pfLABEL, mklbl(LEFT_CHILD(LEFT_CHILD(p))->place), mklbl(LEFT_CHILD(p)->place));}
in:IN(for_begin,expr)  1 {p->place = LEFT_CHILD(p)->place + 1; fprintf(outfp, pfJZ, mklbl(p->place));/*jumps to the end*/continuelbl[++continuecnt] =  ++lbl; }

for_stmt:stmt                   1 {fprintf(outfp, pfLABEL, mklbl(continuelbl[continuecnt]));}
for_begin:  START        1 { p->place = ++lbl; fprintf(outfp, pfLABEL, mklbl(lbl)); brklbl[++brkcnt] = ++lbl;   }


%!END(atr,for)
%!atr:END(stmt,ATR(expr,lv))
%!exp:LE(PTR(lv),step)
%!begin_for: START



%! pre/post in/de-crement Completamente diferente(no code tem apenas 1 arg) FIXME
%!expr:   INC(CTE, lval)  1 { fprintf(outfp, pfDUP pfINCR pfLOAD, LEFT_CHILD(p)->value.i); }
%!expr:   DEC(CTE, lval)  1 { fprintf(outfp, pfDUP pfDECR pfLOAD, LEFT_CHILD(p)->value.i); }
%!expr:   INC(lval, CTE)  1 { fprintf(outfp, pfDUP pfLOAD pfSWAP pfINCR, RIGHT_CHILD(p)->value.i); }
%!expr:   DEC(lval, CTE)  1 { fprintf(outfp, pfDUP pfLOAD pfSWAP pfDECR, RIGHT_CHILD(p)->value.i); }


expr: INCR(lv)                 1   {fprintf(outfp, pfDUP pfINCR pfLOAD, 1);}
expr: DECR(lv)                 1   {fprintf(outfp, pfDUP pfDECR pfLOAD, 1);}
expr: POSINC(lv)              1   {fprintf(outfp, pfDUP pfLOAD pfSWAP pfINCR, 1); }
expr: POSDEC(lv)              1   {fprintf(outfp, pfDUP pfLOAD pfSWAP pfDECR, 1);}

expr: PTR(lv)           1   {int type = p->info % 10; if(ptr_loadchr) {fprintf(outfp,pfLDCHR);ptr_loadchr=0;} else if(type==1||type==2) fprintf(outfp,pfLOAD); if(type==3) fprintf(outfp,pfLOAD2);}
expr: PTR(PTR(lv))      1   {int type = p->info % 10;fprintf(outfp,pfLOAD); if(ptr_loadchr) {fprintf(outfp,pfLDCHR);ptr_loadchr=0;} else if(type==1||type==2) fprintf(outfp,pfLOAD); if(type==3) fprintf(outfp,pfLOAD2);}
expr: REF(lv)    { /* No code, but keep PTR to avoid missing LOADs */ }

convert_real: expr		1 {fprintf(outfp, pfI2D); }
convert_int: expr		1 {fprintf(outfp, pfD2I); }

expr: ATR(expr,lv)      same_type   { int lv_typ = RIGHT_CHILD(p)->info; if(ptr_loadchr) {fprintf(outfp, pfSTCHR); ptr_loadchr=0;} else if(lv_typ==3) fprintf(outfp, pfSTORE2); else fprintf(outfp, pfSTORE);
                                        printf("ASSIGN loadchar:%d typ%d\n",ptr_loadchr,lv_typ);}
expr: ATR(convert_real,lv)      left_int_right_real   { int lv_typ = RIGHT_CHILD(p)->info; if(ptr_loadchr) {fprintf(outfp, pfSTCHR); ptr_loadchr=0;} else if(lv_typ==3) fprintf(outfp, pfSTORE2); else fprintf(outfp, pfSTORE);
                                        printf("ASSIGN loadchar:%d typ%d\n",ptr_loadchr,lv_typ);}
expr: ATR(convert_int,lv)      left_real_right_int   { int lv_typ = RIGHT_CHILD(p)->info; if(ptr_loadchr) {fprintf(outfp, pfSTCHR); ptr_loadchr=0;} else if(lv_typ==3) fprintf(outfp, pfSTORE2); else fprintf(outfp, pfSTORE);
                                        printf("ASSIGN loadchar:%d typ%d\n",ptr_loadchr,lv_typ);}
%! More eficient falta local
%!expr:	ATR(expr,LOCAL)	same_type { fprintf(outfp, pfLOCA, RIGHT_CHILD(p)->value.i); }
%!expr:	ATR(expr,ID)	same_type { fprintf(outfp, pfADDRA, RIGHT_CHILD(p)->value.s); }
expr:	PTR(ID)		1 { fprintf(outfp, pfADDRV, LEFT_CHILD(p)->value.s);/*DOES SEG FAULT SINCE PTR DOESNT HAVE VALUE.S*/ }

expr: INT               1   {fprintf(outfp,pfIMM,p->value.i);}
expr: STR               1   {lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl));}
expr: REAL              1   {lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); fprintf(outfp,pfDOUBLE, p->value.r); fprintf(outfp, pfTEXT pfADDR pfLOAD2, mklbl(lbl));}


%!2 instrucntions not efficient but im not a person of long combinations
expr:   ADD(expr,expr)  only_integer { fprintf(outfp, pfADD); }
expr:   SUB(expr,expr)  only_integer { fprintf(outfp, pfSUB); }
expr:   MUL(expr,expr)  only_integer { fprintf(outfp, pfMUL); }
expr:   DIV(expr,expr)  only_integer { fprintf(outfp, pfDIV); }

expr:   ADD(expr,expr)  has_real { convert_child_real(p); fprintf(outfp, pfDADD); }
expr:   MUL(expr,expr)  has_real { convert_child_real(p); fprintf(outfp, pfDMUL); }
expr:   SUB(expr,expr)  has_real { convert_child_real(p); fprintf(outfp, pfDSUB); }
expr:   DIV(expr,expr)  has_real { convert_child_real(p); fprintf(outfp, pfDDIV); }

expr:   MOD(expr,expr)  only_integer { fprintf(outfp, pfMOD); }


expr:   EQ(expr,expr)   only_integer { fprintf(outfp, pfEQ); }
expr:   NE(expr,expr)   only_integer { fprintf(outfp, pfNE); }
expr:   LT(expr,expr)   only_integer { fprintf(outfp, pfLT); }
expr:   LE(expr,expr)   only_integer { fprintf(outfp, pfLE); }
expr:   GT(expr,expr)   only_integer { fprintf(outfp, pfGT); }
expr:   GE(expr,expr)   only_integer { fprintf(outfp, pfGE); }

expr:   EQ(expr,expr)   has_real { convert_child_real(p); fprintf(outfp, pfDCMP pfIMM pfEQ, 0); }
expr:   NE(expr,expr)   has_real { convert_child_real(p); fprintf(outfp, pfDCMP pfIMM pfNE, 0); }
expr:   LT(expr,expr)   has_real { convert_child_real(p); fprintf(outfp, pfDCMP pfIMM pfLT, 0); }
expr:   LE(expr,expr)   has_real { convert_child_real(p); fprintf(outfp, pfDCMP pfIMM pfLE, 0); }
expr:   GT(expr,expr)   has_real { convert_child_real(p); fprintf(outfp, pfDCMP pfIMM pfGT, 0); }
expr:   GE(expr,expr)   has_real { convert_child_real(p); fprintf(outfp, pfDCMP pfIMM pfGE, 0); }


%!test this in future fazer link, check trash
expr:   EQ(expr,expr)   only_string { fprintf(outfp,pfCALL pfTRASH pfPUSH pfIMM pfEQ, "_strcmp", 2 * pfWORD, 0); }
expr:   NE(expr,expr)   only_string { fprintf(outfp,pfCALL pfTRASH pfPUSH pfIMM pfNE, "_strcmp", 2 * pfWORD, 0); }
expr:   LT(expr,expr)   only_string { fprintf(outfp,pfCALL pfTRASH pfPUSH pfIMM pfLT, "_strcmp", 2 * pfWORD, 0); }
expr:   LE(expr,expr)   only_string { fprintf(outfp,pfCALL pfTRASH pfPUSH pfIMM pfLE, "_strcmp", 2 * pfWORD, 0); }
expr:   GT(expr,expr)   only_string { fprintf(outfp,pfCALL pfTRASH pfPUSH pfIMM pfGT, "_strcmp", 2 * pfWORD, 0); }
expr:   GE(expr,expr)   only_string { fprintf(outfp,pfCALL pfTRASH pfPUSH pfIMM pfGE, "_strcmp", 2 * pfWORD, 0); }

%!test factorial falta fazer o link
expr:   FACT(expr)      only_integer_left { fprintf(outfp,pfCALL pfTRASH pfDPUSH, "_factorial", pfWORD);}

expr:   UMINUS(expr)    only_integer1 { fprintf(outfp, pfNEG); }
expr:   UMINUS(expr)    only_real1 { fprintf(outfp, pfDNEG); }

expr:   NOT(expr)   only_integer1 { fprintf(outfp, pfIMM pfEQ, 0); }

expr:   AND(and,expr)   1 { fprintf(outfp, pfLABEL pfIMM pfNE, mklbl(LEFT_CHILD(p)->place), 0); }
and:    expr        1 { p->place = ++lbl; fprintf(outfp, pfDUP pfJZ pfTRASH, mklbl(p->place), pfWORD); }
expr:   OR(or,expr) 1 { fprintf(outfp, pfLABEL pfIMM pfNE, mklbl(LEFT_CHILD(p)->place), 0); }
or: expr        1 { p->place = ++lbl; fprintf(outfp, pfDUP pfJNZ pfTRASH, mklbl(p->place), pfWORD); }

%! isto faz em comment(tb comment in B)
%!stmt: CALL(LOAD(ADDR),ARG(STRING,END))    doasm { fprintf(outfp, "%s\n", LEFT_CHILD(RIGHT_CHILD(p))- >value.s); }
expr:   CALL(ID,args)   1 { fprintf(outfp, pfCALL pfTRASH, mkfunc(LEFT_CHILD(p)->value.s), (int)((RIGHT_CHILD(p)->place))); 
                            int typ =IDfind(LEFT_CHILD(p)->value.s, NULL) % 20; if(typ/10==1||typ==1||typ==2) fprintf(outfp,pfPUSH); else if(typ==3) fprintf(outfp,pfDPUSH);
                            printf("FUNC CALL: %s TYPE: %d ARGS TRASH:%d\n",LEFT_CHILD(p)->value.s,typ,(int)((RIGHT_CHILD(p)->place)));}


%! if-else
base:   ELSE(if,stmt)   1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }

if: IF(cond,stmt)   1 { p->place = ++lbl; fprintf(outfp, pfJMP pfLABEL,mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }

%! simple if (no else): uses only one label
base:   IF(cond,stmt)   1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond:   expr        1 { p->place = ++lbl; fprintf(outfp, pfJZ, mklbl(p->place)); }


stmt: base
stmt: brk


%! left values
lvec:	lv		1 { fprintf(outfp, pfLOAD); /*LOAD the rodata addr for the array, it cAN ONLY BE INT I ASSUME*/}
lv: INDEX_S(lvec,expr) 1 { fprintf(outfp, pfADD); ptr_loadchr=1; /*forward a char, 1 byte*/}

lv: INDEX(lvec,expr) 1 { fprintf(outfp, pfIMM pfMUL pfADD, pfWORD); }

%! falta os diversis type
lv: LOCAL  1 {fprintf(outfp, pfLOCAL, p->value.i); }
lv: ID      1   {fprintf(outfp, pfADDR, p->value.s);}



%! Sera q nos usamos load? * lv



%%
#include "y.tab.h"
extern void yyerror(const char*);
extern char **yynames;
extern int trace;

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
    int op = OP_LABEL(p);
    YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
    /*fprintf(stderr, "0x%lx:%s matched %s with cost %d vs. %d\n", (long)p, tname, yystring[eruleno],   cost, bestcost); */
    if (cost >= MAX_COST && bestcost >= MAX_COST) {
      extern char **yynames;
      fprintf(stderr, "0x%lx:%s NO MATCH %s with cost %d vs. %d\n", (long)p, tname, yystring[eruleno],   cost, bestcost);
      printNode(p, 0, yynames);
    }
}
#endif


void externs()
{
    int i;
    for (i = 0; i < extcnt; i++)
        if (extrns[i])
            fprintf(outfp, pfEXTRN, extrns[i]);
}

//FIXME CHECK VALUES
int calculate_enter(char* fpar,int type){
	int enter = dim(type);
	for(int i=1;i<=fpar[0];i++){
		//ptr
		if(fpar[i] / 10==1 || fpar[i] ==1 || fpar[i]==2)
			enter+=pfWORD;
		//number
		else if(fpar[i]==3)
			enter+=pfWORD*2;
	}
  return enter;
}


void function_burg(char *name, int enter, Node *stmt,Node *type)
{
  int i;
  // int enter =calculate_enter(fpar,type->value.i);
  func_name=dupstr(name);
  printf("\tENTER VALUE%d\n",enter);



  if (trace) printNode(stmt, 0, yynames);

  fflush(stdout);
  fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), enter);
  
  yyselect(stmt);

  printf("return type %d dim %d\n",type->value.i,dim(type->value.i));

  if(type->value.i==4){
    fprintf(outfp,pfLEAVE pfRET);
  }else if(type->value.i==3){
    fprintf(outfp, pfLOCAL pfLOAD2 pfDPOP pfLEAVE pfRET,-dim(type->value.i));
  }else{

    fprintf(outfp, pfLOCAL pfLOAD pfPOP pfLEAVE pfRET,-dim(type->value.i)); /* just in case ... */
  }
  freeNode(stmt);

  for (i = 0; i < extcnt; i++) /*Remove extern case public forward declaration*/
    if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) extrns[i] = 0;
}

void function_extern(char *func_name){
  printf("EXTERNAL FUNC:%s\n",func_name);

  extrns[extcnt++] = dupstr(mkfunc(func_name)); 
}

void declare_burg(int pub, int cnst, Node *type, char *name, Node *value)
{
  int siz = type->attrib==REAL ? 2 : 1;//this is not totally right

  if(value) printf("VALUE POSITIVE");
  printf("pub %d",pub);
  //se for variavel exterior faz apenas extern
  if(pub && !value){
      printf("EXTERN DECLARE %s\n",name);
      extrns[extcnt++] = dupstr(name); 
      return;
  }

  if(pub) fprintf(outfp, pfGLOBL, name, pfOBJ);

  if(cnst) fprintf(outfp, pfRODATA);
  else if(!value || (type->attrib == INTEGER &&  value->value.i==0) || (type->attrib == NUMBER &&  value->value.r==0) ){
    fprintf(outfp, pfBSS); //although if has no value cant be const
    fprintf(outfp,pfALIGN pfLABEL, name);
    return; //finish
  } 
  else fprintf(outfp, pfDATA);


  fprintf(outfp,pfALIGN pfLABEL, name);


  //FIXME VERIFY THIS
  if(value){
    switch (type->attrib)
    {
      case INTEGER:{
        // //considering a int in 32bit system, long 64bit        
        // fprintf(outfp, pfWORD == 4 ? pfINTEGER : pfLONG, value->value.i);

         fprintf(outfp,pfINTEGER, value->value.i);

        break;
      }
      case STRING:{
      
        char *l = mklbl(++lbl);

        fprintf(outfp, pfRODATA pfALIGN pfLABEL, l);

        outstr(value->value.s);

        fprintf(outfp, pfDATA pfID, l); //FIXME perceber isto(penso q seja associar um endereco a rodata)

        break;
      }

      case NUMBER:{
        fprintf(outfp,pfDOUBLE, value->value.r);
        break;
      }
    }
    
  }else{
      //not initiated,not public
      fprintf(outfp, pfBYTE, pfWORD * siz);
  }


}


