%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"
%}
%term END=';' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>' ASSIGN='=' BOR='|' BAND='&'
%include "y.tab.h"
%%


stmt:	END	1	{	}





tipo: INTEGER(1+ptr) 
tipo: STRING(2+ptr)
tipo: NUMBER(3+ptr)

init: ID



decls:
decls: END(decls,param)

param: PARAM(tipo,ID)


base: VOID()
base: WHILE(DO(START(),stmt),expr)
base


expr:   ADD(expr,expr)  1 { fprintf(outfp, pfADD); }
expr:   SUB(expr,expr)  1 { fprintf(outfp, pfSUB); }
expr:   MUL(expr,expr)  1 { fprintf(outfp, pfMUL); }
expr:   DIV(expr,expr)  1 { fprintf(outfp, pfDIV); }
expr:   MOD(expr,expr)  1 { fprintf(outfp, pfMOD); }
expr:   BOR(expr,expr)  1 { fprintf(outfp, pfOR); }
expr:   BAND(expr,expr) 1 { fprintf(outfp, pfAND); }
expr:   LSH(expr,expr)  1 { fprintf(outfp, pfSHTL); }
expr:   RSH(expr,expr)  1 { fprintf(outfp, pfSHTRS); }
expr:   EQ(expr,expr)   1 { fprintf(outfp, pfEQ); }
expr:   NE(expr,expr)   1 { fprintf(outfp, pfNE); }
expr:   LT(expr,expr)   1 { fprintf(outfp, pfLT); }
expr:   LE(expr,expr)   1 { fprintf(outfp, pfLE); }
expr:   GT(expr,expr)   1 { fprintf(outfp, pfGT); }
expr:   GE(expr,expr)   1 { fprintf(outfp, pfGE); }
expr:   UMINUS(expr)    1 { fprintf(outfp, pfNEG); }


%%
#include "y.tab.h"
extern void yyerror(const char*);
extern char **yynames;
extern int trace;
